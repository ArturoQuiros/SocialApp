import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { arrow, autoPlacement, shift } from '@floating-ui/core';
import { autoUpdate, flip, offset, useClick, useFloating, useFocus, useHover, useInteractions, useRole, } from '@floating-ui/react-dom-interactions';
import classNames from 'classnames';
import { useEffect, useRef, useState } from 'react';
import { excludeClassName } from '../../helpers/exclude';
import { useTheme } from '../Flowbite/ThemeContext';
/**
 * @see https://floating-ui.com/docs/react-dom-interactions
 */
export const Tooltip = ({ animation = 'duration-300', arrow = true, children, content, placement = 'top', style = 'dark', trigger = 'hover', ...props }) => {
    const theme = useTheme().theme.tooltip;
    const theirProps = excludeClassName(props);
    const arrowRef = useRef(null);
    const [open, setOpen] = useState(false);
    const floatingTooltip = useFloating({
        middleware: floatingMiddleware({ arrowRef, placement }),
        onOpenChange: setOpen,
        open,
        placement: floatingPlacement({ placement }),
    });
    const { context, floating, middlewareData: { arrow: { x: arrowX, y: arrowY } = {} }, reference, refs, strategy, update, x, y, } = floatingTooltip;
    const { getFloatingProps, getReferenceProps } = useInteractions([
        useClick(context, { enabled: trigger === 'click' }),
        useFocus(context),
        useHover(context, { enabled: trigger === 'hover' }),
        useRole(context, { role: 'tooltip' }),
    ]);
    useEffect(() => {
        if (refs.reference.current && refs.floating.current && open) {
            return autoUpdate(refs.reference.current, refs.floating.current, update);
        }
    }, [open, refs.floating, refs.reference, update]);
    return (_jsxs(_Fragment, { children: [_jsx("div", { className: theme.target, ...getReferenceProps({ ref: reference }), "data-testid": "tooltip-target", children: children }), _jsxs("div", { "data-testid": "tooltip", ...getFloatingProps({
                    className: classNames(theme.base, animation && `${theme.animation} ${animation}`, !open && theme.hidden, theme.style[style]),
                    ref: floating,
                    style: {
                        position: strategy,
                        top: y ?? ' ',
                        left: x ?? ' ',
                    },
                    ...theirProps,
                }), children: [_jsx("div", { className: theme.content, children: content }), arrow && (_jsx("div", { className: classNames(theme.arrow.base, {
                            [theme.arrow.style.dark]: style === 'dark',
                            [theme.arrow.style.light]: style === 'light',
                            [theme.arrow.style.auto]: style === 'auto',
                        }), "data-testid": "tooltip-arrow", ref: arrowRef, style: {
                            top: arrowY ?? ' ',
                            left: arrowX ?? ' ',
                            right: ' ',
                            bottom: ' ',
                            [floatingArrowPlacement({ placement: floatingTooltip.placement })]: theme.arrow.placement,
                        }, children: "\u00A0" }))] })] }));
};
/**
 * @see https://floating-ui.com/docs/middleware
 */
const floatingMiddleware = ({ arrowRef, placement, }) => {
    const middleware = [];
    middleware.push(offset(8));
    middleware.push(placement === 'auto' ? autoPlacement() : flip());
    middleware.push(shift({ padding: 8 }));
    if (arrowRef.current) {
        middleware.push(arrow({ element: arrowRef.current }));
    }
    return middleware;
};
const floatingPlacement = ({ placement }) => {
    return placement === 'auto' ? undefined : placement;
};
const floatingArrowPlacement = ({ placement }) => {
    return {
        top: 'bottom',
        right: 'left',
        bottom: 'top',
        left: 'right',
    }[placement.split('-')[0]];
};
